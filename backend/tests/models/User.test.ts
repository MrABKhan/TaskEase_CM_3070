import mongoose from 'mongoose';
import User from '../../models/User';
import { mockUser } from '../mocks/mockData';

// Mock the User model
jest.mock('../../models/User');

describe('User Model', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should create a new user successfully', async () => {
    const userData = { ...mockUser };
    delete userData._id; // Remove _id as it will be generated by MongoDB
    
    // Mock the save method
    const mockSave = jest.fn().mockResolvedValue({
      ...userData,
      _id: new mongoose.Types.ObjectId().toString(),
    });
    
    // Mock the User constructor
    (User as unknown as jest.Mock).mockImplementation(() => ({
      save: mockSave,
    }));
    
    const user = new User(userData);
    const savedUser = await user.save();
    
    expect(savedUser._id).toBeDefined();
    expect(savedUser.name).toBe(mockUser.name);
    expect(savedUser.email).toBe(mockUser.email);
    expect(savedUser.password).toBe(mockUser.password);
    expect(savedUser.secretKey).toBe(mockUser.secretKey);
    expect(mockSave).toHaveBeenCalled();
  });

  it('should fail to create a user without required fields', async () => {
    // Mock validation error
    const mockSave = jest.fn().mockRejectedValue(
      new mongoose.Error.ValidationError()
    );
    
    // Mock the User constructor
    (User as unknown as jest.Mock).mockImplementation(() => ({
      save: mockSave,
    }));
    
    const user = new User({
      name: 'Incomplete User',
      // Missing email, password, and secretKey
    });
    
    let error;
    try {
      await user.save();
    } catch (err) {
      error = err;
    }
    
    expect(error).toBeDefined();
    expect(error).toBeInstanceOf(mongoose.Error.ValidationError);
    expect(mockSave).toHaveBeenCalled();
  });

  it('should find a user by email', async () => {
    // Mock User.findOne
    (User.findOne as jest.Mock).mockResolvedValue(mockUser);
    
    const foundUser = await User.findOne({ email: mockUser.email });
    
    expect(foundUser).toBeDefined();
    expect(foundUser?.name).toBe(mockUser.name);
    expect(foundUser?.email).toBe(mockUser.email);
    expect(User.findOne).toHaveBeenCalledWith({ email: mockUser.email });
  });

  it('should find a user by secretKey', async () => {
    // Mock User.findOne
    (User.findOne as jest.Mock).mockResolvedValue(mockUser);
    
    const foundUser = await User.findOne({ secretKey: mockUser.secretKey });
    
    expect(foundUser).toBeDefined();
    expect(foundUser?.name).toBe(mockUser.name);
    expect(foundUser?.secretKey).toBe(mockUser.secretKey);
    expect(User.findOne).toHaveBeenCalledWith({ secretKey: mockUser.secretKey });
  });
}); 